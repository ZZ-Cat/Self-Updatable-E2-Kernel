#[
    The Self Updatable E2 simplifies & automates the updating process of a User App.

    Self Updatable E2. Copyright (c) 2020. Cassandra "ZZ Cat" Robinson.

    This Expression 2 Script is free software. You can redistribute & modify this Expression 2 Script under the terms of the
    GNU Affero General Public License, version 3. Or, (at your option) any later version of this license.

    This Expression 2 Script is distributed with the intention that it will be useful.
    However, it is distributed "as is", & WITHOUT WARRANTY. This includes implied warranties such as merchantability &/or fitness for a particular purpose.
    Any other warranties that have the potential to be applicable to this Expression 2 Script is hereby disclaimed & excluded.
    Read the GNU Affero General Public License for further details.

    You should have received a copy of the GNU Affero General Public License with this Expression 2 Script.
    Otherwise, see this link for details: https://www.gnu.org/licenses/

    You can acquire the source code for this E2, here: https://bit.ly/SelfUpdatableE2_Source
    Developer contributions & ideas are welcome. Submit your pull requests here: https://bit.ly/SelfUpdatableE2_Contribute
    Head on over to my Facebook Page & click the "Follow" button: https://bit.ly/ZZCatOnFacebook
    NB: I don't do friend requests on my Facebook Page. So, don't take offense, if I delete your requests.
]#

@name Self-Updatable Kernel/main
@model
@persist [APP_RunOnTick_Nbr APP_AutoUpdate_Nbr ResetOnDupefinished_Delay_Nbr]:number [URL_Str DIR_Str E2Data_Str VC_URL_Str US_URL_Str App_Directory_Str]:string
@trigger all
@autoupdate

#[ Reset Handler. ]#
if(dupefinished()){

    # This number can be adjusted upward, as a temporary workaround to a bug that cropped up in version 1.0.0. See the errata for further details.
    ResetOnDupefinished_Delay_Nbr = 0

    # Reset on Dupefinished delay, based on server lag & a pre-adjusted number.
    timer("Reset", (realtime() - curtime()) + ResetOnDupefinished_Delay_Nbr)

}

if(clk("Reset")){

    # Reset the E2.
    stoptimer("Reset")
    reset()

}

#[ Initialize the E2 & User App. ]#
if(first()){

    # Stop the kernel from resetting, on the first run.
    stoptimer("Reset")

    # This include is the path to your application. THIS file is what the kernel updates, when new code is made available.
    #include "e2shared/mySelfUpdatableE2/main"

    # These includes are vital for the kernel to function.
    #include "self-updatable kernel/include/config"

    # Load configs.
    APP_RunOnTick_Nbr = Kernel_Config["Run On Tick", string] == "yes" ? 1 : 0
    APP_AutoUpdate_Nbr = Kernel_Config["Auto-Update User App", string] == "yes" ? 1 : 0
    App_Directory_Str = Kernel_Config["User App Directory", string]
    US_URL_Str = Kernel_Config["Update Server URL", string]
    VC_URL_Str = Kernel_Config["Version Check URL", string]

    # Initialize the user's application.
    setup()

    # Set the name of the user's application. NB: This will appear in the E2's popup window, when you look at the E2 chip in-game.
    local AppName_Str = ""

    AppName_Str += App_Config["App Author", string]
    AppName_Str += "'s\n"
    AppName_Str += App_Config["App Name", string]
    AppName_Str += "\nVersion "
    AppName_Str += App_Config["App Version", string]

    setName(AppName_Str)

    # Set execution triggers.
    runOnTick(APP_RunOnTick_Nbr)
    runOnHTTP(1)
    runOnFile(1)

    # Start an HTTP request.
    URL_Str = VC_URL_Str
    timer("Request from HTTP", 100)

}

#[ Automatic HTTP Request Handler. ]#
if(clk("Request from HTTP")){

    # Cancel the automatic request timer.
    stoptimer("Request from HTTP")

    if(httpCanRequest()){

        # Request data from the specified URL.
        httpRequest(URL_Str)

    }

    else{

        # Reset the automatic request timer.
        timer("Request from HTTP", 3000)

    }
}

#[ HTTP Callback Handler. ]#
if(httpClk()){

    # Local variables store relevant URL & HTTP data.
    local CallbackURL_Str = httpRequestUrl()
    local Data_Str = httpData()

    # Expedite version checking & automatic updates, only when data is present in the HTTP Data String.
    if(Data_Str != ""){

        # Switch-case deals with the returned HTTP data, according to which URL requested it.
        switch(CallbackURL_Str){

            # Version Check Server requested HTTP data.
            case VC_URL_Str,

                local Lines_Ary = Data_Str:explode("\n")
                local SV_Kernel_Author_Str = Lines_Ary[1, string]:explode("Author: ")[2, string]
                local SV_Kernel_Name_Str = Lines_Ary[2, string]:explode("Name: ")[2, string]
                local SV_Kernel_Version_Str = Lines_Ary[3, string]:explode("Version: ")[2, string]

                local SV_Updatable_Author_Str = Lines_Ary[5, string]:explode("Author: ")[2, string]
                local SV_Updatable_Name_Str = Lines_Ary[6, string]:explode("Name: ")[2, string]
                local SV_Updatable_Version_Str = Lines_Ary[7, string]:explode("Version: ")[2, string]

                local CFG_Kernel_Author_Str = Kernel_Config["Kernel Author", string]
                local CFG_Kernel_Name_Str = Kernel_Config["Kernel Name", string]
                local CFG_Kernel_Version_Str = Kernel_Config["Kernel Version", string]

                local CFG_Updatable_Author_Str = App_Config["App Author", string]
                local CFG_Updatable_Name_Str = App_Config["App Name", string]
                local CFG_Updatable_Version_Str = App_Config["App Version", string]

                # Invalid author's & E2's name handler.
                if(SV_Kernel_Author_Str != CFG_Kernel_Author_Str || SV_Kernel_Name_Str != CFG_Kernel_Name_Str){

                    # Invalid name & author handler.
                    printColor(vec(255, 0, 0), "[ERROR]", vec(255), ": You have altered the origin of this E2's source code, & are in direct violation of its license.")
                    selfDestruct()

                }

                # What to do, when a new version of the kernel is available.
                elseif(SV_Kernel_Version_Str != CFG_Kernel_Version_Str){

                    # Print a rudimentary message to the chat.
                    printColor(vec(0, 100, 200), "[NOTICE]", vec(255), ": A new version of this E2 is available at: ", vec(0, 0, 255), "https://bit.ly/SelfUpdatableE2_Update")

                }

                # What to do, when a new version of the linked file is available.
                elseif(SV_Updatable_Version_Str != CFG_Updatable_Version_Str){

                    # How should the new update be handled?
                    if(APP_AutoUpdate_Nbr){

                        # Send an HTTP request to the update server.
                        URL_Str = US_URL_Str
                        timer("Request from HTTP", 100)

                    }

                    else{

                        # Print a notification to the chat.
                        printColor(vec(0, 100, 200), "[NOTICE]", vec(255), ": A new version of the User App is available. Enable automatic updates in the Config to download it.")

                    }
                }
                break

            # Update Server requested HTTP Data.
            case US_URL_Str,

                # Download new code from the update server & start a call to open up the local file.
                E2Data_Str = Data_Str
                DIR_Str = App_Directory_Str
                timer("Load File", 500)
                break

            # Non-declared URL requested HTTP data.
            default,

                # This is an error, as it is not a part of the self-updating process.
                printColor(vec(255, 0, 0), "[ERROR]", vec(255), ": An invalid URL tried to request HTTP data.")
                break

        }
    }

    # When no data is present in the HTTP Data Buffer, this is an error.
    else{

        # Print an error to the chat.
        printColor(vec(255, 0, 0), "[ERROR]", vec(255), ": No data is present in HTTP Data Buffer.")

    }
}

#[ File Load Handler. ]#
if(clk("Load File")){

    stoptimer("Load File")

    if(fileCanLoad()){

        fileLoad(DIR_Str)

    }

    else{

        timer("Load File", 10000)

    }
}

#[ User App File Uploaded Callback Handler. ]#
if(fileClk(App_Directory_Str)){

    switch(fileStatus()){

        case _FILE_OK,
            timer("Update User App", 200)
            break

        case _FILE_404,
            printColor(vec(255, 0, 0), "[ERROR]", vec(255), ": No User App was found.")
            break

        case _FILE_UNKNOWN,
            printColor(vec(255, 0, 0), "[ERROR]", vec(255), ": Invalid User App extension. User App needs to be ", vec(0, 0, 255), "'*.txt'", vec(255), ".")
            break

        default,
            printColor(vec(255, 0, 0), "[ERROR]", vec(255), ": Failed to update User App.")
            break

    }
}

if(clk("Update User App")){

    stoptimer("Update User App")

    if(fileCanWrite()){

        fileWrite(DIR_Str, E2Data_Str)
        setName("Zap me with the Expression 2 Tool.")
        printColor(vec(0, 255, 0), "[INFO]", vec(255), ": Successfully updated User App. It is now safe to reload the E2.")
        runOnTick(0)
        exit()

    }

    else{

        timer("Update User App", 200)

    }
}

#[ Execute application code. ]#
defaultE2handler()
if(tickClk()){ loop() }
if(inputClk()){ inputEvent() }
